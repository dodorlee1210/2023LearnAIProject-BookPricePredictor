from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd

!pip install kaggle
! mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

# Clearning Data
df = df_original.copy()
df.drop(columns=['Reviews', 'Book_title', 'Description'], inplace=True)
df.dropna(inplace=True)
transform_type = LabelEncoder()
df['Type'] = transform_type.fit_transform(df['Type'])

# Separating Data for Prediction
y = df.drop(columns=['Number_Of_Pages','Type','Rating']).values
x = df.drop('Price', axis=1).values
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=True)

# Building the Model
model = Sequential()
model.add(Dense(20, input_dim=x_train.shape[1], kernel_initializer='normal', activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(1, kernel_initializer='normal'))
model.compile(loss='mean_squared_error', optimizer='adam')

# Training the Model
epochs = 50
history = model.fit(x_train, y_train, epochs=epochs, validation_data=(x_test, y_test))

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (25,10)

# Visualizing Model Prediction Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
